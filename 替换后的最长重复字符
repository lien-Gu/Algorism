/**
题目：
给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k ：次。在执行上述操作后，找到包含重复字母的最长子串的长度。

注意：字符串长度 和 k 不会超过 104。

解题思路：

由于字符串中仅包含大写字母，我们可以使用一个长度为 2626 的数组维护每一个字符的出现次数。
每次区间右移，我们更新右移位置的字符出现的次数，然后尝试用它更新重复字符出现次数的历史最大值，最后我们使用该最大值计算出区间内非最长重复字符的数量，以此判断左指针是否需要右移即可。


**/
class Solution {
public:
    int characterReplacement(string s, int k) {
        int num[26]={0};    //用于记忆当前字符串窗口不同字符的个数
        int left=0,right=0; //具有记忆性，会记住当前经过的最大窗口，左端右端
        int maxn=0; //当前窗口个数最多的字符的个数
        int n=s.length();   //整个字符串长度
        while(right < n)    //遍历整个字符
        {
            num[s[right]-'A']++;    //经过的字符，相应其+1
            maxn = max(maxn, num[s[right]-'A']);//寻找字符串中字符最多的字母
            if(right - left - maxn + 1> k)  //判断是否超出替换范围
            {
                num[s[left]-'A']--; //若超出，则左端往后移一位，相应其在num数组中的个数少一
                left++;
            }
            right++;    //右端继续移动
        }
        return right - left;
    }
};
